-- CSC2021 Modelling Coursework Feb 2017
-- Complete the coursework by extending this file as specified
-- in the coursework.
-- Submit your modified copy of this file together with
-- output file generated by using the Run() command.
module Crossing
imports from IO all, from VDMUtil all
definitions

state Crossing of 
  leftBank : Place
  rightBank : Place
  boatPos: Bank
  inv cr == true -- invariant to be added here: replace true with your invariant 
  init cr == cr = mk_Crossing({<Goat>,<Wolf>,<Cabbage>,<Farmer>},{},<Left>)
  end 
  
  
types

Passenger = <Goat> | <Wolf> | <Cabbage> | <Farmer>;

Bank = <Left> | <Right>;

Place = set of Passenger;


functions

-- add functions here
	
operations

CrossRight: set of Passenger ==> ()  
CrossRight(passengers) == is not yet specified;

CrossLeft: set of Passenger ==> ()  
CrossLeft(passengers) == is not yet specified;


Run: () ==> ()
Run() ==
 ( 
  fopen();  -- reopen output file, overwriting current contents
  
  -- complete this operation by adding a sequence of steps to solve the puzzle
  -- solution can be found at
  -- https://illuminations.nctm.org/BrainTeasers.aspx?id=4992  
    );
    
    
    
-- Output functions - should not need to edit below this line
 values
 outfile: seq of char = "crossing-run.txt";
 
 operations
 fopen: () ==> ()
 fopen() ==
  (dcl OK: bool;
   OK := IO`fecho(outfile, "", <start>);
   );
   
 fprint: seq of char ==> ()
 fprint(string) == 
  (dcl OK: bool;
   OK := IO`fecho(outfile, string, <append>););
 
 fprintln:  seq of char ==> ()
 fprintln(string) == fprint (string ^ "\n");
 
 fprintState:() ==> ()
 fprintState() == ( 
   fprintln("Crossing state:\n============");
   fprintln(toString(Crossing));
   );
 
   
types  -- build a union type for all types we might want to print
basic = int | nat | nat1 | real | bool | char | token;
defined = Passenger | Bank | Place | Crossing;
collection = set of basic | set of defined | seq of basic | seq of defined;
alltypes = basic | defined | collection

functions
 toString: alltypes -> seq of char
 toString(x) == 
   VDMUtil`val2seq_of_char[alltypes](x);  
   
end Crossing
